import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class SortThread extends Thread {
    private Integer[] array; // Массив для сортировки
    private boolean ascending; // Порядок сортировки

    // Конструктор класса
    public SortThread(Integer[] array, boolean ascending) {
        this.array = array; // Инициализация массива
        this.ascending = ascending; // Инициализация порядка сортировки
    }

    // Метод, выполняющий сортировку в отдельном потоке
    @Override
    public void run() {
        if (ascending) {
            Arrays.sort(array); // Сортировка по возрастанию
        } else {
            Arrays.sort(array, Comparator.reverseOrder()); // Сортировка по убыванию
        }
    }

    // Метод для получения отсортированного массива
    public Integer[] getSortedArray() {
        return array; // Возвращает отсортированный массив
    }
}

public class Main {
    public static void main(String[] args) {
        // Читаем массив из файла
        Integer[] array = readArrayFromFile("array.txt");
        if (array == null) { // Проверка на ошибки чтения
            System.out.println("Ошибка при чтении массива из файла.");
            return; // Завершаем программу
        }

        // Вывод размерности и элементов массива
        System.out.println("Размерность массива: " + array.length);
        System.out.println("Элементы исходного массива: " + Arrays.toString(array));

        // Запрос порядка сортировки
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите порядок сортировки (введите 'asc' для возрастания или 'desc' для убывания): ");
        String order = scanner.next(); // Чтение порядка сортировки
        boolean ascending = order.equalsIgnoreCase("asc"); // Проверка порядка сортировки

        // Создание и запуск потока сортировки
        SortThread sortThread = new SortThread(array, ascending);
        sortThread.start(); // Запускаем поток

        try {
            sortThread.join(); // Ожидание завершения потока Sort
        } catch (InterruptedException e) {
            System.out.println("Поток был прерван."); // Обработка исключения прерывания потока
        }

        // Вывод отсортированного массива
        System.out.println("Отсортированный массив: " + Arrays.toString(sortThread.getSortedArray()));
    }

    // Метод для чтения массива из файла
    private static Integer[] readArrayFromFile(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line = br.readLine(); // Чтение первой строки файла
            String[] numbers = line.split(","); // Разделение строки на элементы по запятой
            Integer[] array = new Integer[numbers.length]; // Создание массива Integer
            for (int i = 0; i < numbers.length; i++) {
                array[i] = Integer.parseInt(numbers[i].trim()); // Преобразование строк в целые числа
            }
            return array; // Возвращаем массив
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace(); // Вывод стека исключения
            return null; // Возвращаем null в случае ошибки
        }
    }
}
